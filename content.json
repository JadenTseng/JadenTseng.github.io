{"meta":{"title":"Jaden Tseng","subtitle":"博观而约取，厚积而薄发。","description":"博观而约取，厚积而薄发。","author":"Jaden Tseng","url":"http://zgang.top"},"pages":[{"title":"","date":"2018-05-20T13:51:18.271Z","updated":"2018-05-20T13:51:18.271Z","comments":true,"path":"404.html","permalink":"http://zgang.top/404.html","excerpt":"","text":""},{"title":"关于","date":"2018-05-20T12:16:32.000Z","updated":"2018-05-20T12:24:39.464Z","comments":true,"path":"about/index.html","permalink":"http://zgang.top/about/index.html","excerpt":"","text":"姓名： 郑刚技能：Java、Android、C#、Python(学习中) 职业：Android应用开发邮箱：jaden.tseng@foxmail.com 愿景：本博客网站是重新建的一个，希望用来记录自己的生活、工作、学习心得，不断提升自己。"},{"title":"常用链接","date":"2018-05-20T12:15:46.000Z","updated":"2018-05-20T12:25:11.260Z","comments":true,"path":"links/index.html","permalink":"http://zgang.top/links/index.html","excerpt":"","text":"技术社区 segmentfault freebuf 工具 codota-代码片段 codebag-代码片段 gitbook-书籍制作 readthedocs-文档制作 imgur-免费图片分享 thecodeplayer-代码播放 学习网站 runoob-很广泛的技能学习网站 看图说设计模式"}],"posts":[{"title":"python-爬虫","slug":"python-爬取妹子图","date":"2016-05-20T13:34:41.000Z","updated":"2018-05-27T13:18:47.978Z","comments":true,"path":"2016/05/20/python-爬取妹子图/","link":"","permalink":"http://zgang.top/2016/05/20/python-爬取妹子图/","excerpt":"","text":"前言本人是搞Java、Android开发的，有编程基础。python是刚刚起步学习，在看完《Head first python》这本书后，一直想做一个项目练练手，思来想去不知道做python什么项目好，看网上大家都在玩爬虫。所以自己也花了一个晚上的时间写了个抓取“妹子图片”的爬虫，养眼的福利噢大家需要注意博主用的是Python3.x 。 先上截图，看看成果： 步骤 找个图片网站，分析它页面上的HTML源代码，提取HTML源代码中有用信息（图片链接、名称） 下载图片到本地 详细过程分析网站，我们浏览器F12，进入开发者模式，通过箭头查找模式找到图片显示区域的父容器: 这个标签内有好多个标签，li标签内部有标签，我们要提取的内容就是href的地址（即相册地址），以及相册描述 光有相册的信息还不够，我们还要去相册的网页看一下，把相册里面的所有图片链接给提取出来。 分析该页面，我们发现它的html源代码中有这个地方就是相册内图片的导航区域（即 上下图页面，这里每一个图片显示在一个对应的页面)。 代码中，我们要把相册的图片总数给拿到，即上图“51”，表示最后一张图片。 它的每一张图片对应的网页都是有规律的： http://www.mzitu.com/62728 http://www.mzitu.com/62728/2 ……… http://www.mzitu.com/62728/51 发现了吗，我们只需要拿到总图片个数，然后代码中拼接一下，生成51个网页路径即可。 然后我们对分别对着51个页面解析html源代码，提取出图片的路径 代码我已经写好了，看官们可以访问代码仓：https://github.com/JadenTseng/python-get-girl-image 获取。 后续因为没有GUI图像化界面，就不能发给非程序员的小伙伴分享成果，自己也想接触一下python的图形化界面开发，于是就使用了PyQt来实现咱们的妹子图图形化界面版本，代码已经追加到了项目中。喜欢的小伙伴们可以start、fork。 上一张效果图给大家：","categories":[{"name":"python","slug":"python","permalink":"http://zgang.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://zgang.top/tags/python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://zgang.top/tags/爬虫/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://zgang.top/categories/python/"}]},{"title":"python-运算符","slug":"python-运算符","date":"2016-02-27T14:17:32.000Z","updated":"2018-05-20T13:56:11.997Z","comments":true,"path":"2016/02/27/python-运算符/","link":"","permalink":"http://zgang.top/2016/02/27/python-运算符/","excerpt":"","text":"123456789101112131415161718192021# -*- coding: utf-8 -*-# 6: 00000110# 11 00001011a = 6|11print(a) # 15（00001111） 有一个1则为1b = 6&amp;11print(b); # 2（00000010） 两个都是1则为1c = 6^11print(c) # 13（00001101） 两个相同则为0，不同则为1# 左移e = 6 &lt;&lt; 4print(e) # 6*(2*4) = 96 , 6乘以2的4次幂# 右移f = 96 &gt;&gt; 2 # 96/(2*2) = 24 , 96除以2的2次幂print(f)","categories":[{"name":"python","slug":"python","permalink":"http://zgang.top/categories/python/"}],"tags":[{"name":"python","slug":"python","permalink":"http://zgang.top/tags/python/"}],"keywords":[{"name":"python","slug":"python","permalink":"http://zgang.top/categories/python/"}]},{"title":"android原生Fragment在replace时切换动画过程中出现卡顿，界面重叠的问题","slug":"android-Fragment-repace","date":"2016-02-27T12:12:16.000Z","updated":"2018-05-20T13:56:35.536Z","comments":true,"path":"2016/02/27/android-Fragment-repace/","link":"","permalink":"http://zgang.top/2016/02/27/android-Fragment-repace/","excerpt":"","text":"最近在做一个项目，开始我的界面使用的是原生Activity+原生Fragment。两个Fragment之间来回切换，界面只显示一个Fragment。这回用到ft.replace方法同时设置了setCustomAnimation。结果发现Fragment在切换的过程中出现一瞬间的重叠，老是找不出来原因。后来，网上查了一些资料，说使用V4包，因为V4包考虑到了兼容性，并且ft的setCustomAnimation是使用的Animator的translate。 于是换了一下实现，结果发现还真没有出现卡顿重叠了。在此记录一下，备忘。","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"},{"name":"fragment","slug":"fragment","permalink":"http://zgang.top/tags/fragment/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]},{"title":"Android-Training-Saving Data","slug":"Android-Training-Saving-Data","date":"2015-12-20T15:26:00.000Z","updated":"2018-05-20T13:56:26.341Z","comments":true,"path":"2015/12/20/Android-Training-Saving-Data/","link":"","permalink":"http://zgang.top/2015/12/20/Android-Training-Saving-Data/","excerpt":"","text":"保存数据 SharedPreferences如果你是通过Context.MODE_WORLD_READABLE 或 Context.MODE_WORLD_WRITEABLE创建的SharedPreferences配置文件, 那么其他应用程序都将被允许访问您的该配置文件。如果您只想本应用自己内部使用这个配置文件，那你可以使用Context.MODE_PRIVATE。例如: 1SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE); 写入Shared Preferences需要创建SharedPreferences.Editor对象用来写入数据，可以通过SharedPreferences调用其edit()方法得到。然后调用editor一系列的put函数，例如putInt、putString等。例如：1234SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);SharedPreferences.Editor editor = sharedPref.edit();editor.putInt(getString(R.string.saved_high_score), newHighScore);editor.commit(); 读取Shared Preferences想要读取Shared Preferences文件中的数据，可以通过SharedPreferences提供的一系列get函数，例如getInt、getString等。123SharedPreferences sharedPref = getActivity().getPreferences(Context.MODE_PRIVATE);int defaultValue = getResources().getInteger(R.string.saved_high_score_default);long highScore = sharedPref.getInt(getString(R.string.saved_high_score), defaultValue); 保存文件读和写文件，都需要在AndroidManifest.xml中声明相应的权限。读权限： 1234&lt;manifest ...&gt;&lt;uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /&gt;...&lt;/manifest&gt; 写权限：1234&lt;manifest ...&gt;&lt;uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" /&gt;...&lt;/manifest&gt; 保存文件到内部存储获得适当的目录，你可以通过如下方式：context.getFilesDir() 为您的应用程序返回一个内部文件目录context.getCacheDir() 返回一个app的临时缓存的内部文件目录。保存文件到外部存储要使用外部存储首先要知道是否可以读写：123456789101112131415161718/* 检查外部存储是否可读写 */public boolean isExternalStorageWritable() &#123; String state = Environment.getExternalStorageState(); if (Environment.MEDIA_MOUNTED.equals(state)) &#123; return true; &#125; return false;&#125;/* 检查外部存储是否可读 */public boolean isExternalStorageReadable() &#123; String state = Environment.getExternalStorageState(); if (Environment.MEDIA_MOUNTED.equals(state) || Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) &#123; return true; &#125; return false;&#125; 另外要得到外部存储目录, 可以使用如下代码：123context.getExternalFilesDir(); context.getExternalFilesDir(Environment.DIRECTORY_PICTURES); 直接得到外部存储公共目录, 例如得到公共图片库目录：1Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES); 还可以使用DIRECTORY_MUSIC、DIRECTORY_RINGTONES等公共目录。","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]},{"title":"Android性能优化-SparseArray替代HashMap","slug":"2015-11-30-Android性能优化-SparseArray替代HashMap","date":"2015-11-30T12:00:00.000Z","updated":"2018-05-20T13:53:48.889Z","comments":true,"path":"2015/11/30/2015-11-30-Android性能优化-SparseArray替代HashMap/","link":"","permalink":"http://zgang.top/2015/11/30/2015-11-30-Android性能优化-SparseArray替代HashMap/","excerpt":"","text":"Android提供了 SparseArray 类，并推荐让你在数据量不大的情况下尽可能的使用它，来替代HashMap。它内部使用了两个数组分别记录key, value. 它的目的就是为了高效性能，它采用二分查找算法，关键代码如下：12345678910111213141516private static int binarySearch(int[] a, int start, int len, int key) &#123;int high = start + len, low = start - 1, guess;while (high - low &gt; 1) &#123; guess = (high + low) / 2; if (a[guess] &lt; key) low = guess; else high = guess;&#125;if (high == start + len) return ~(start + len);else if (a[high] == key) return high;else return ~high;&#125; SparseArray 还派生了如 SparseIntArray 等子类，从 SparseIntArray字面意思上就可以看出它省去了自动装箱(int 转为 Integer) 所以更加节省内存。","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"},{"name":"性能优化","slug":"性能优化","permalink":"http://zgang.top/tags/性能优化/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]},{"title":"安装genymotion模拟器的使用注意事项","slug":"2015-11-29-genymotion模拟器安装说明","date":"2015-11-29T12:59:00.000Z","updated":"2018-05-27T13:22:06.796Z","comments":true,"path":"2015/11/29/2015-11-29-genymotion模拟器安装说明/","link":"","permalink":"http://zgang.top/2015/11/29/2015-11-29-genymotion模拟器安装说明/","excerpt":"注册账号 首先需要去genymotion的 官方网站 注册一个账号，这样才可以下载并使用genymotion程序 下载在官网上下载该软件时会有几个版本，供你选择，如果你的电脑上没有安装oracle公司的VM VirtualBox，请下载包含了VM VirtualBox版本的附件，如果你的电脑之前有装过VM VirtualBox，那么你可以选择下载 without vmbox的版本。博主这里下载了一个含虚拟机的genymotion版本，下载地址：http://pan.baidu.com/s/1bnDiMBX 请先别急着下载，看完这篇文章后再下载，可以帮助你了解附件内的文件都是起到什么作用的。","text":"注册账号 首先需要去genymotion的 官方网站 注册一个账号，这样才可以下载并使用genymotion程序 下载在官网上下载该软件时会有几个版本，供你选择，如果你的电脑上没有安装oracle公司的VM VirtualBox，请下载包含了VM VirtualBox版本的附件，如果你的电脑之前有装过VM VirtualBox，那么你可以选择下载 without vmbox的版本。博主这里下载了一个含虚拟机的genymotion版本，下载地址：http://pan.baidu.com/s/1bnDiMBX 请先别急着下载，看完这篇文章后再下载，可以帮助你了解附件内的文件都是起到什么作用的。 安装并设置安装的时候直接下一步即可，需要安装虚拟机的也一并安装上。保证Genymotion 和 VM VirtualBox 安装完毕后，双击启动Genymotion应用程序。 来到主界面 请点击Settings按钮，选择ADB选项卡，进行设置你电脑当前的Android SDK Path。 点击主界面上的Add按钮，新建一个模拟器，但是需要你先登录genymotion上注册的账号,登录成功后即可选择你需要的模拟器。 点击选中你创建的模拟器，然后点击上方的Start按钮，运行你创建的模拟器。 至此，模拟器基本可以运行起来了，运行不起来的话，可能会出现can not start的提示信息。这个错误是你的电脑上的C:/windows/systemui32路径下的uxtheme.dll、themeservice.dll、themeui.dll文件在你电脑破解主题的时候被替换过。除非你的是原装系统，否则使用第三方的破解过主题的系统的可能会出现上面的问题。 那么，怎么修复这个问题呢。解决办法，请下载文章上面的附件，里面有详细解决说明。解决后，这时再Start模拟器，即可启动。 运行起来的模拟器，使用adb shell命令居然找不到设备？别急，这是由于android版本不断升级带来的问题，解决办法同样见文章上面附件（附件内包含了一个zip的文件包），将这个zip文件包用鼠标拖放到电脑当前运行起来的模拟器里，模拟器里就会出现一个对话框，点击ok，更新完毕后，重新启动你的模拟器即可解决此问题。","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"},{"name":"模拟器","slug":"模拟器","permalink":"http://zgang.top/tags/模拟器/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]},{"title":"Android-判断当前是否触摸到view","slug":"2015-11-27-android-touch","date":"2015-11-27T14:22:41.000Z","updated":"2018-05-20T13:55:35.874Z","comments":true,"path":"2015/11/27/2015-11-27-android-touch/","link":"","permalink":"http://zgang.top/2015/11/27/2015-11-27-android-touch/","excerpt":"","text":"12345678910public static boolean inTouchInslideOfView(View view, MotionEvent ev) &#123; int[] location = new int[2]; view.getLocationInWindow(location); int x = location[0]; int y = location[1]; if (ev.getX() &gt; x &amp;&amp; ev.getX() &lt; (x + view.getWidth()) &amp;&amp; ev.getY() &gt; y &amp;&amp; ev.getY() &lt; (y + view.getHeight()))&#123; return true; &#125; return false;&#125;","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"},{"name":"view","slug":"view","permalink":"http://zgang.top/tags/view/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]},{"title":"Android-屏蔽back键，保证在点击back键时Dialog对话框不会消失","slug":"2015-11-25-android-dialog-backkey","date":"2015-11-25T13:23:11.000Z","updated":"2018-05-20T13:55:34.181Z","comments":true,"path":"2015/11/25/2015-11-25-android-dialog-backkey/","link":"","permalink":"http://zgang.top/2015/11/25/2015-11-25-android-dialog-backkey/","excerpt":"","text":"123456789101112mSaveingProgressDialog.setOnKeyListener(mDialogOnKeylistener); DialogInterface.OnKeyListener mDialogOnKeylistener = new DialogInterface.OnKeyListener()&#123; public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) &#123; if (mSaveing) &#123; if (KeyEvent.KEYCODE_BACK == keyCode) &#123; return true; &#125; &#125; return false; &#125;&#125; ; 即给对话框设置按键监听OnKeyListener，在onKey()方法中判断当前点击的按键是否是back键，如果是则return true","categories":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}],"tags":[{"name":"android","slug":"android","permalink":"http://zgang.top/tags/android/"}],"keywords":[{"name":"android","slug":"android","permalink":"http://zgang.top/categories/android/"}]}]}